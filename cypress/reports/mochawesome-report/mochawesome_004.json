{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 10,
    "pending": 0,
    "failures": 4,
    "start": "2024-07-21T08:18:37.988Z",
    "end": "2024-07-21T08:22:12.684Z",
    "duration": 214696,
    "testsRegistered": 14,
    "passPercent": 71.42857142857143,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bbd0bb86-1e17-4821-92e5-4726e6d6a034",
      "title": "",
      "fullFile": "cypress\\e2e\\Verify_RegisterUser.cy.js",
      "file": "cypress\\e2e\\Verify_RegisterUser.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bd861bce-5cfb-4eff-804e-1d206595ea98",
          "title": "Verify the functionality of Register User",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "it should register a user with a valid credentials",
              "fullTitle": "Verify the functionality of Register User it should register a user with a valid credentials",
              "timedOut": null,
              "duration": 23685,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const formData = {\n  password: _faker.faker.internet.password(10, false, /[A-Za-z0-9]/, \"James@\"),\n  firstname: _faker.faker.name.firstName(),\n  lastname: _faker.faker.name.lastName(),\n  selectDays: _faker.faker.datatype.number({\n    min: 1,\n    max: 30\n  }).toString(),\n  selectMonth: _faker.faker.datatype.number({\n    min: 1,\n    max: 12\n  }).toString(),\n  selectYear: _faker.faker.date.past(30, new Date()).getFullYear().toString(),\n  company: _faker.faker.company.name(),\n  address1: _faker.faker.address.streetAddress(),\n  address2: _faker.faker.address.secondaryAddress(),\n  country: \"Canada\",\n  state: _faker.faker.address.state(),\n  city: _faker.faker.address.city(),\n  zipcode: _faker.faker.address.zipCode(),\n  phone: _faker.faker.phone.number()\n};\nuser.enterpassword(formData.password);\nuser.enterfirst_name(formData.firstname);\nuser.enterlast_name(formData.lastname);\nuser.selectDays(formData.selectDays);\nuser.selectMonth(formData.selectMonth);\nuser.selectYear(formData.selectYear);\nuser.selectCompany(formData.company), user.selectAddress1(formData.address1), user.selectAddress2(formData.address2), user.selectCountry(formData.country), user.selectState(formData.state), user.selectCity(formData.city), user.selectZipCode(formData.zipcode), user.enterPhone(formData.phone);\nuser.CreateAccount(), user.verifyAccountCreated();",
              "err": {},
              "uuid": "8572bca1-5681-40f8-89df-ea1ab01340ec",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should show validation errors on emtpy password field",
              "fullTitle": "Verify the functionality of Register User It should show validation errors on emtpy password field",
              "timedOut": null,
              "duration": 6441,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "user.CreateAccount();\ncy.get(\"#password\").as(\"password\");\ncy.get(\"@password\").then($pass => {\n  const validationMessage = $pass[0].validationMessage;\n  expect(validationMessage).to.eq(\"Please fill out this field.\");\n});",
              "err": {},
              "uuid": "12df9fcc-bbf5-4839-8a8d-1924e6fd356a",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should display validation error on empty firstname",
              "fullTitle": "Verify the functionality of Register User it should display validation error on empty firstname",
              "timedOut": null,
              "duration": 9529,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"RegisterUsers\").then(data => {\n  const account = data.account;\n  user.enterpassword(account.password);\n  user.CreateAccount();\n  cy.get(\"#first_name\").as(\"fname\");\n  cy.get(\"@fname\").then($firstname => {\n    const validationMessage = $firstname[0].validationMessage;\n    expect(validationMessage).to.eq(\"Please fill out this field.\");\n  });\n});",
              "err": {},
              "uuid": "57d95051-d80c-49b2-af49-43f2854cea09",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should display validation error on empty lastname",
              "fullTitle": "Verify the functionality of Register User it should display validation error on empty lastname",
              "timedOut": null,
              "duration": 7846,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"RegisterUsers\").then(data => {\n  const account = data.account;\n  user.enterpassword(account.password);\n  user.enterfirst_name(account.firstname);\n  user.CreateAccount();\n  cy.get(\"#last_name\").as(\"lname\");\n  cy.get(\"@lname\").then($lastname => {\n    const validationMessage = $lastname[0].validationMessage;\n    expect(validationMessage).to.eq(\"Please fill out this field.\");\n  });\n});",
              "err": {},
              "uuid": "b8705d8c-4c03-4b07-916d-e38f1c6da789",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should display validation message on empty address field",
              "fullTitle": "Verify the functionality of Register User it should display validation message on empty address field",
              "timedOut": null,
              "duration": 8663,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"RegisterUsers\").then(data => {\n  const account = data.account;\n  user.enterpassword(account.password);\n  user.enterfirst_name(account.firstname);\n  user.enterlast_name(account.lastname);\n  user.CreateAccount();\n  cy.get(\"#address1\").then($address => {\n    const addressValidationMessage = $address[0].validationMessage;\n    expect(addressValidationMessage).to.eq(\"Please fill out this field.\");\n  });\n});",
              "err": {},
              "uuid": "2f2574ff-f8ff-4bb0-ad58-3d3c9dd78026",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should display validation message on empty state field",
              "fullTitle": "Verify the functionality of Register User it should display validation message on empty state field",
              "timedOut": null,
              "duration": 7992,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"RegisterUsers\").then(data => {\n  const account = data.account;\n  user.enterpassword(account.password);\n  user.enterfirst_name(account.firstname);\n  user.enterlast_name(account.lastname);\n  user.selectAddress1(account.address1);\n  user.CreateAccount();\n  cy.get(\"#state\").then($state => {\n    const stateValidationMessage = $state[0].validationMessage;\n    expect(stateValidationMessage).to.eq(\"Please fill out this field.\");\n  });\n});",
              "err": {},
              "uuid": "ae51d1a3-1444-4d89-a281-a4533300a687",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should display validation message on empty city field",
              "fullTitle": "Verify the functionality of Register User it should display validation message on empty city field",
              "timedOut": null,
              "duration": 45587,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"RegisterUsers\").then(data => {\n  const account = data.account;\n  user.enterpassword(account.password);\n  user.enterfirst_name(account.firstname);\n  user.enterlast_name(account.lastname);\n  user.selectAddress1(account.address1);\n  user.selectState(account.state);\n  user.CreateAccount();\n  cy.get(\"#city\").then($city => {\n    const cityValidationMessage = $city[0].validationMessage;\n    expect(cityValidationMessage).to.eq(\"Please fill out this field.\");\n  });\n});",
              "err": {},
              "uuid": "e4cd1ef5-7c93-4894-8b1f-77e02e2317d5",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should display validation message on empty zipcode field",
              "fullTitle": "Verify the functionality of Register User it should display validation message on empty zipcode field",
              "timedOut": null,
              "duration": 13853,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"RegisterUsers\").then(data => {\n  const account = data.account;\n  user.enterpassword(account.password);\n  user.enterfirst_name(account.firstname);\n  user.enterlast_name(account.lastname);\n  user.selectAddress1(account.address1);\n  user.selectState(account.state);\n  user.selectCity(account.city);\n  user.CreateAccount();\n  cy.get(\"#zipcode\").then($zip => {\n    const zipValidationMessage = $zip[0].validationMessage;\n    expect(zipValidationMessage).to.eq(\"Please fill out this field.\");\n  });\n});",
              "err": {},
              "uuid": "5bfb5f2b-3a6d-451f-bffd-c6e88a3158be",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should display validation message on empty mobile number field field",
              "fullTitle": "Verify the functionality of Register User it should display validation message on empty mobile number field field",
              "timedOut": null,
              "duration": 12463,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"RegisterUsers\").then(data => {\n  const account = data.account;\n  user.enterpassword(account.password);\n  user.enterfirst_name(account.firstname);\n  user.enterlast_name(account.lastname);\n  user.selectAddress1(account.address1);\n  user.selectState(account.state);\n  user.selectCity(account.city);\n  user.selectZipCode(account.zipcode);\n  user.CreateAccount();\n  cy.get(\"#mobile_number\").then($mobile => {\n    const validationMessage = $mobile[0].validationMessage;\n    expect(validationMessage).to.eq(\"Please fill out this field.\");\n  });\n});",
              "err": {},
              "uuid": "1c262b98-5347-4805-bdfa-4a83fbdcb359",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Password length should be greather than 7",
              "fullTitle": "Verify the functionality of Register User Password length should be greather than 7",
              "timedOut": null,
              "duration": 19839,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"RegisterUsers\").then(data => {\n  const account = data.account;\n  user.enterpassword(account.password);\n  cy.get(\"#password\").as(\"pass\");\n  cy.get(\"@pass\").invoke(\"val\").then(pass => {\n    if (pass.length <= 7) {\n      expect(pass.length).to.be.greaterThan(7, \"Password length should be greather than 7\");\n    }\n  });\n  user.enterfirst_name(account.firstname);\n  user.enterlast_name(account.lastname);\n  user.selectAddress1(account.address1);\n  user.selectState(account.state);\n  user.selectCity(account.city);\n  user.selectZipCode(account.zipcode);\n  user.enterPhone(account.mobile);\n  user.CreateAccount();\n});",
              "err": {},
              "uuid": "b1dc706d-6cf4-408d-a00e-d81418047a8d",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "First name should not accept numbers/Digits",
              "fullTitle": "Verify the functionality of Register User First name should not accept numbers/Digits",
              "timedOut": null,
              "duration": 6980,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"RegisterUsers\").then(data => {\n  const account = data.account;\n  const invalidFirstName = \"Shahid77\";\n  user.enterpassword(account.password);\n  user.enterfirst_name(invalidFirstName);\n  cy.get(\"#first_name\").as(\"fname\").invoke(\"val\").then(value => {\n    const hasDigit = /\\d/.test(value);\n    expect(hasDigit).to.be.false;\n  });\n  user.enterlast_name(account.lastname);\n  user.selectAddress1(account.address1);\n  user.selectState(account.state);\n  user.selectCity(account.city);\n  user.selectZipCode(account.zipcode);\n  user.enterPhone(account.mobile);\n  user.CreateAccount();\n});",
              "err": {
                "message": "AssertionError: expected true to be false",
                "estack": "AssertionError: expected true to be false\n    at Context.eval (webpack://learning/./cypress/e2e/Verify_RegisterUser.cy.js:236:33)",
                "diff": null
              },
              "uuid": "db01c355-af5d-47ee-bde0-1f38915c82a6",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Last name should not accept numbers/Digits",
              "fullTitle": "Verify the functionality of Register User Last name should not accept numbers/Digits",
              "timedOut": null,
              "duration": 6044,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"RegisterUsers\").then(data => {\n  const account = data.account;\n  const invalidLName = \"Shahid88\";\n  user.enterpassword(account.password);\n  user.enterfirst_name(account.firstname);\n  user.enterlast_name(invalidLName);\n  cy.get(\"#last_name\").as(\"fname\").invoke(\"val\").then(value => {\n    const hasDigit = /\\d/.test(value);\n    expect(hasDigit).to.be.false;\n  });\n  user.selectAddress1(account.address1);\n  user.selectState(account.state);\n  user.selectCity(account.city);\n  user.selectZipCode(account.zipcode);\n  user.enterPhone(account.mobile);\n  user.CreateAccount();\n});",
              "err": {
                "message": "AssertionError: expected true to be false",
                "estack": "AssertionError: expected true to be false\n    at Context.eval (webpack://learning/./cypress/e2e/Verify_RegisterUser.cy.js:259:33)",
                "diff": null
              },
              "uuid": "981292fa-39a6-4cf7-85d0-a4ecee83fcac",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Password Length Must be Atleast 8 characters Combination of Lower Case+ upperCase + number and Special characters",
              "fullTitle": "Verify the functionality of Register User Password Length Must be Atleast 8 characters Combination of Lower Case+ upperCase + number and Special characters",
              "timedOut": null,
              "duration": 20426,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const invalidPassword = \"12345678Aa\";\n// const passData = {\n//   password: faker.internet.password(10, false, /[A-Za-z0-9]/, \"James@\"),\n// };\nuser.enterpassword(invalidPassword);\ncy.get(\"#password\").invoke(\"val\").then(password => {\n  expect(password.length).to.be.gte(10);\n  expect(/[a-z]/.test(password)).to.be.true;\n  expect(/[A-Z]/.test(password)).to.be.true;\n  expect(/\\d/.test(password)).to.be.true;\n  expect(/[!@#$%^&*(),.?\":{}|<>]/.test(password)).to.be.true;\n});",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at Context.eval (webpack://learning/./cypress/e2e/Verify_RegisterUser.cy.js:284:62)",
                "diff": null
              },
              "uuid": "dd9e1eff-9cc8-43df-9f9a-332d2fa84de7",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Phone number should not accept More than 12 digits And No character is allowed.",
              "fullTitle": "Verify the functionality of Register User Phone number should not accept More than 12 digits And No character is allowed.",
              "timedOut": null,
              "duration": 10728,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const invalidPhoneNumber = \"234564588UUUU888\";\nuser.enterPhone(invalidPhoneNumber);\ncy.get(\"#mobile_number\").as(\"mobileNumber\");\ncy.get(\"@mobile_number\").invoke(\"val\").then(phone => {\n  expect(phone.length).to.be.lte(12, \"phone number should not exceed 12 digits\");\n  expect(/^\\d+$/.test(phone)).to.be.true;\n});",
              "err": {
                "message": "AssertionError: phone number should not exceed 12 digits: expected 16 to be at most 12",
                "estack": "AssertionError: phone number should not exceed 12 digits: expected 16 to be at most 12\n    at Context.eval (webpack://learning/./cypress/e2e/Verify_RegisterUser.cy.js:295:35)",
                "diff": "- 16\n+ 12\n"
              },
              "uuid": "1a71f2a5-df41-4fe6-b35b-5b0ff821fdd2",
              "parentUUID": "bd861bce-5cfb-4eff-804e-1d206595ea98",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8572bca1-5681-40f8-89df-ea1ab01340ec",
            "12df9fcc-bbf5-4839-8a8d-1924e6fd356a",
            "57d95051-d80c-49b2-af49-43f2854cea09",
            "b8705d8c-4c03-4b07-916d-e38f1c6da789",
            "2f2574ff-f8ff-4bb0-ad58-3d3c9dd78026",
            "ae51d1a3-1444-4d89-a281-a4533300a687",
            "e4cd1ef5-7c93-4894-8b1f-77e02e2317d5",
            "5bfb5f2b-3a6d-451f-bffd-c6e88a3158be",
            "1c262b98-5347-4805-bdfa-4a83fbdcb359",
            "b1dc706d-6cf4-408d-a00e-d81418047a8d"
          ],
          "failures": [
            "db01c355-af5d-47ee-bde0-1f38915c82a6",
            "981292fa-39a6-4cf7-85d0-a4ecee83fcac",
            "dd9e1eff-9cc8-43df-9f9a-332d2fa84de7",
            "1a71f2a5-df41-4fe6-b35b-5b0ff821fdd2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 200076,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}